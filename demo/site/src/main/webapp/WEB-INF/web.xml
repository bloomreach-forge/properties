<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
  Copyright 2010 Hippo Licensed under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0 Unless required by
  applicable law or agreed to in writing, software distributed under the
  License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
  CONDITIONS OF ANY KIND, either express or implied. See the License for
  the specific language governing permissions and limitations under the
  License.
-->
<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         version="2.4"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee   http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
  <display-name>Hippo Site Toolkit Container Web Application</display-name>

  <context-param>
    <param-name>webAppRootKey</param-name>
    <param-value>site.webapp.root</param-value>
  </context-param>

  <!-- I18N  -->
  <context-param>
    <param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name>
    <param-value>messages</param-value>
  </context-param>

  <!--
    HST-2 Content Beans Annotation Configuration. You can configure it
    with either xml or classes location filter. For example, if the
    parameter value is set to '/WEB-INF/beans-annotated-classes.xml',
    all the annotated bean classes will be loaded from the xml
    configuration file. If the parameter value is set to
    'classpath*:org/hippoecm/hst/demo/beans/**/*.class', all the
    annotated bean classes will be automatically scanned from the
    location. If the context parameter is not configured,
    '/WEB-INF/beans-annotated-classes.xml' will be used by default.
    Also, you can configure multiple classpath resource location filters
    separated by comma or white spaces. For example, you can set the
    parameter value to
    'classpath*:org/hippoecm/hst/demo/beans/**/*.class,
    classpath*:org/hippoecm/hst/demo2/beans/**/*.class' to specify two
    or more different location filters.
  -->
  <context-param>
    <param-name>hst-beans-annotated-classes</param-name>
    <param-value>classpath*:org/onehippo/forge/propertiesdemo/**/*.class,
      classpath*:org/onehippo/forge/properties/**/*.class
    </param-value>
  </context-param>


  <listener>
    <listener-class>org.hippoecm.hst.site.container.HstContextLoaderListener</listener-class>
  </listener>

  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>

  <filter>
    <filter-name>HstFilter</filter-name>
    <filter-class>org.hippoecm.hst.container.HstFilter</filter-class>
  </filter>

  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>HstFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>


  <servlet>
    <servlet-name>BinariesServlet</servlet-name>
    <servlet-class>org.hippoecm.hst.servlet.BinariesServlet</servlet-class>
    <!--
      If you are not using hippogallery:exampleImageSet you might want to define your
      own primaryitem location. If you leave away the primaryitem altogether, then, when the binary location
      is not pointing at an actual jcr resource, we'll try to serve the jcr primaryitem in case this points
      to a resource. For assets, we'll serve the primay item as there won't be a hippogallery:picture for an asset
     -->
    <init-param>
      <param-name>primaryitem</param-name>
      <param-value>hippogallery:picture</param-value>
    </init-param>
  </servlet>

  <servlet>
    <servlet-name>SecurityResourceServlet</servlet-name>
    <servlet-class>org.onehippo.cms7.utilities.servlet.ResourceServlet</servlet-class>
    <init-param>
      <param-name>jarPathPrefix</param-name>
      <param-value>/META-INF/hst/security</param-value>
    </init-param>
  </servlet>

  <servlet>
    <servlet-name>HstResourceServlet</servlet-name>
    <servlet-class>org.onehippo.cms7.utilities.servlet.ResourceServlet</servlet-class>
    <init-param>
      <param-name>jarPathPrefix</param-name>
      <param-value>/META-INF/web-resources</param-value>
    </init-param>
  </servlet>

  <servlet>
    <servlet-name>LoginServlet</servlet-name>
    <servlet-class>org.hippoecm.hst.security.servlet.LoginServlet</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>BinariesServlet</servlet-name>
    <url-pattern>/binaries/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>SecurityResourceServlet</servlet-name>
    <url-pattern>/login/hst/security/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>HstResourceServlet</servlet-name>
    <url-pattern>/resources/*</url-pattern>
  </servlet-mapping>


  <servlet-mapping>
    <servlet-name>LoginServlet</servlet-name>
    <url-pattern>/login/*</url-pattern>
  </servlet-mapping>


  <security-constraint>
    <web-resource-collection>
      <web-resource-name>Login</web-resource-name>
      <url-pattern>/login/resource</url-pattern>
    </web-resource-collection>
    <auth-constraint>
      <role-name>everybody</role-name>
    </auth-constraint>
  </security-constraint>

  <login-config>
    <auth-method>FORM</auth-method>
    <realm-name>HSTSITE</realm-name>
    <form-login-config>
      <form-login-page>/login/login</form-login-page>
      <form-error-page>/login/error</form-error-page>
    </form-login-config>
  </login-config>

  <security-role>
    <description>Default role of Hippo Repository</description>
    <role-name>everybody</role-name>
  </security-role>

  <!-- The Usual Welcome File List -->
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <error-page>
    <error-code>404</error-code>
    <location>/WEB-INF/jsp/errorpages/ErrorPage404.jsp</location>
  </error-page>

  <error-page>
    <error-code>500</error-code>
    <location>/WEB-INF/jsp/errorpages/ErrorPage500.jsp</location>
  </error-page>

  <error-page>
    <exception-type>org.hippoecm.hst.core.container.ContainerNotFoundException</exception-type>
    <location>/WEB-INF/jsp/errorpages/ErrorPage404.jsp</location>
  </error-page>

  <error-page>
    <exception-type>java.io.FileNotFoundException</exception-type>
    <location>/WEB-INF/jsp/errorpages/ErrorPage404.jsp</location>
  </error-page>

  <error-page>
    <exception-type>org.hippoecm.hst.core.container.ContainerException</exception-type>
    <location>/WEB-INF/jsp/errorpages/ErrorPage500.jsp</location>
  </error-page>

  <error-page>
    <exception-type>java.lang.Exception</exception-type>
    <location>/WEB-INF/jsp/errorpages/ErrorPage500.jsp</location>
  </error-page>

  <!-- If you want to use a pooling JCR repository from JNDI, uncomment the following and configure the correct jndiName. -->
  <!--
  <resource-ref>
      <description>JCR Session Pooling Repository provided by HST-2 Core Components</description>
      <res-ref-name>jcr/repository</res-ref-name>
      <res-type>javax.jcr.Repository</res-type>
      <res-auth>Container</res-auth>
  </resource-ref>
  -->
  <env-entry>
    <env-entry-name>logging/contextName</env-entry-name>
    <env-entry-type>java.lang.String</env-entry-type>
    <env-entry-value>site</env-entry-value>
  </env-entry>
</web-app>

