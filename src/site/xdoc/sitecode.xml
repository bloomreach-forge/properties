<?xml version="1.0"?>
<!--
  Copyright 2010 Hippo
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
  <properties>
    <title>Usage in a HST site</title>
  </properties>
  <body>
    <section name="Usage in a HST site">
      <p>
        HST components should read documents and prepare data for JSPs. This can be done 
        manually in Java code or using the Properties Manager.
      </p>
      <subsection name="Use the PropertiesManager in a HST component">
        <p>
          This is an example of how properties documents are read using the manager. 
          The manager will look for properties with configured name or the default name from 
          the configure default location, relative to the given site content base bean.
        </p>
        <source><![CDATA[
  // get the manager  
  final ComponentManager componentManager = (ComponentManager) this.getDefaultClientComponentManager();
  final PropertiesManager propertiesManager = componentManager.getComponent(PropertiesManager.class.getName());
  final HippoBean baseBean this.getSiteContentBaseBean(request);

  // retrieve one document bean by the configured default name
  final PropertiesBean defaultPropertiesBean = this.propertiesManager.getPropertiesBean(baseBean);
  final Map<String, String> defaultLabels = PropertiesUtil.toMap(propertiesBean);

  // .. or retrieve one document bean by path parameter
  final String labelsPath = this.getParameter("labelsPath", request);
  final PropertiesBean propertiesBean = this.propertiesManager.getPropertiesBean(labelsPath, baseBean);
  final Map<String, String> labels = PropertiesUtil.toMap(propertiesBean);

  // .. or retrieve multiple documents bean by paths
  final List<String> labelsPaths = Arrays.asList("common", "specific");
  final List<PropertiesBean> propertiesBeans = this.propertiesManager.getPropertiesBeans(labelsPaths, baseBean);
  final Map<String, String> allLabels = PropertiesUtil.toMap(propertiesBeans);


  final Map<String, String> labels = PropertiesUtil.toMap(propertiesBean);
  request.setAttribute("labels", labels);]]></source>
      </subsection>
      <subsection name="Manual retrieval of properties in a HST component">
        <p>
          This is an example of how a properties document containing labels is read 
          from a configured path relative to current document. This is typically 
          something that you can do in your project's base component. 
        </p>
        <source><![CDATA[
  String labelsPath = this.getParameter("labelsPath", request);
  Properties labels = (Properties) this.getContentBean(request).getBean(labelsPath);
  request.setAttribute("labels", new PropertiesMap(new PropertiesBean(labels));]]></source>
      </subsection>
      <subsection name="Reading properties in JSP files">
        <p>
          Because the bean set at the request is a Map, it can be read easily using expression 
          language. This is an example of reading labels:
        </p>
        <source><![CDATA[
  <div id="header">
      <span>${labels['header.title']}</span>
      <span>${labels['header.subtitle']}</span>
  </div>]]></source>
      </subsection>
    </section>
  </body>
</document>
